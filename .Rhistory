strip.text.y = element_text(size=12, face="bold"),
legend.text= element_text(size=12),
legend.title=element_text(size=13,  face="bold"),
plot.title=element_text(size=16, hjust=0.5, face="bold"),
plot.subtitle=element_text(size=14,hjust=0.5),
panel.border = element_rect(colour = "black", size=1),
legend.key =  element_rect(fill = 'white', size = 0.5),
strip.background = element_rect(colour="white", fill="#FFFFFF")
)
print(WEO_TFC_CO2_MINMAXreg)
library("gganimate")
library("gifski")
library("glue")
WEO_TFC_CO2_MINMAXreg.animate <- WEO_TFC_CO2_MINMAXreg +
transition_time(Year.x) +
labs(title = 'Year: {frame_time} \n World Energy Outlook 2014-2018 (length of bars)  \n Indexed CO2 emissions \n')
# animate in a two step process:
animate(WEO_TFC_CO2_MINMAXreg.animate, height = 600, width = 700)
WEO_TFC_CO2_MINMAXreg=ggplot()+
geom_crossbar(data=WEO_TFCCO2.indexminmax[Year.x %in% c(2005:2040) & Region %in% c("World", "CHINA", "INDIA", "EU") & Carrier=="Total" & Indicator=="TFC"], aes(x=Region, ymin=ymin, ymax=ymax, y=ymax, fill=Scenario, colour=Scenario), width=.7, position=position_dodge(width=0.7))+
#
annotate("rect", xmin=-Inf,xmax=Inf,ymin=0,ymax=100, fill="lightgrey", alpha=0.6) +
# annotate("rect", xmin=-Inf,xmax=Inf,ymin=100,ymax=Inf, fill="lightblue", alpha=0.6) +
# annotate("text", x=0.6,y=109, label="Net negative", size=3, angle=90, colour="dimgrey", hjust=0) +
annotate("text", x=0.6, y=45, label="Reduction", size=3, angle=90, colour="dimgrey",  hjust=1) +
annotate("text", x=0.6, y=120, label="Increase", size=3, angle=90, colour="dimgrey",  hjust=0) +
geom_crossbar(data=WEO_TFCCO2.indexminmax[Year.x %in% c(2005:2050) & Region %in% c("World", "CHINA", "INDIA", "EU") & Carrier=="Total" & Indicator=="TFC"], aes(x=Region, ymin=ymin, ymax=ymax, y=ymax, fill=Scenario, colour=Scenario), width=.7, position=position_dodge(width=0.7))+
geom_hline(data=WEO_TFCCO2.indexminmax[Year.x %in% c(2005:2050) & Region %in% c( "EU") & Carrier=="Total" & Indicator=="Industry" & Scenario=="2DS"], aes(yintercept=ymin), colour="black", linetype=2)+
geom_text(data=WEO_TFCCO2.indexminmax[Year.x %in% c(2005:2050) & Region %in% c( "EU") & Carrier=="Total" & Indicator=="Industry" & Scenario=="2DS"], aes(y=ymin+3, x=Region), label="EU Industry emissions for 2DS scenario [WEO 2018]", colour="black", size=5)+
geom_hline(yintercept=100)+
geom_hline(yintercept=0)+
ggtitle(bquote("CO2 emissions for TFC")) +
xlab(" \n Regions") + ylab("Index (2010=100) \n ")+
#facet_wrap(~Region, nrow=1)+
scale_fill_manual(
values=c('#d7191c','#fdae61','#2ca25f','#abd9e9','#2c7bb6', 'black'))+
scale_colour_manual(
values=c('#d7191c','#fdae61','#2ca25f','#abd9e9','#2c7bb6', 'black')) +
guides(colour = element_blank()) +
coord_cartesian(ylim=c(0:150)) +
theme_bw() +
theme(
axis.text.x = element_text(angle = 45, size=12,  hjust=1),
axis.title.y = element_text(size=13),
axis.title.x = element_text(size=13),
axis.text.y = element_text(size=12),
strip.text.x = element_text(size=12, face="bold"),
strip.text.y = element_text(size=12, face="bold"),
legend.text= element_text(size=12),
legend.title=element_text(size=13,  face="bold"),
plot.title=element_text(size=16, hjust=0.5, face="bold"),
plot.subtitle=element_text(size=14,hjust=0.5),
panel.border = element_rect(colour = "black", size=1),
legend.key =  element_rect(fill = 'white', size = 0.5),
strip.background = element_rect(colour="white", fill="#FFFFFF")
)
print(WEO_TFC_CO2_MINMAXreg)
library("gganimate")
library("gifski")
library("glue")
WEO_TFC_CO2_MINMAXreg.animate <- WEO_TFC_CO2_MINMAXreg +
transition_time(Year.x) +
labs(title = 'Year: {frame_time} \n World Energy Outlook 2014-2018 (length of bars)  \n Indexed CO2 emissions (2010=100) \n')
# animate in a two step process:
animate(WEO_TFC_CO2_MINMAXreg.animate, height = 600, width = 700)
anim_save("Animate_CO2.gif")
WEO_TFC_CO2_MINMAXreg=ggplot()+
geom_crossbar(data=WEO_TFCCO2.indexminmax[Year.x %in% c(2005:2040) & Region %in% c("World", "CHINA", "INDIA", "EU") & Carrier=="Total" & Indicator=="TFC"], aes(x=Region, ymin=ymin, ymax=ymax, y=ymax, fill=Scenario, colour=Scenario), width=.7, position=position_dodge(width=0.7))+
#
annotate("rect", xmin=-Inf,xmax=Inf,ymin=0,ymax=100, fill="lightgrey", alpha=0.6) +
# annotate("rect", xmin=-Inf,xmax=Inf,ymin=100,ymax=Inf, fill="lightblue", alpha=0.6) +
# annotate("text", x=0.6,y=109, label="Net negative", size=3, angle=90, colour="dimgrey", hjust=0) +
annotate("text", x=0.6, y=45, label="Reduction", size=3, angle=90, colour="dimgrey",  hjust=1) +
annotate("text", x=0.6, y=120, label="Increase", size=3, angle=90, colour="dimgrey",  hjust=0) +
geom_crossbar(data=WEO_TFCCO2.indexminmax[Year.x %in% c(2005:2050) & Region %in% c("World", "CHINA", "INDIA", "EU") & Carrier=="Total" & Indicator=="TFC"], aes(x=Region, ymin=ymin, ymax=ymax, y=ymax, fill=Scenario, colour=Scenario), width=.7, position=position_dodge(width=0.7))+
geom_hline(data=WEO_TFCCO2.indexminmax[Year.x %in% c(2005:2050) & Region %in% c( "EU") & Carrier=="Total" & Indicator=="Industry" & Scenario=="2DS"], aes(yintercept=ymin), colour="black", linetype=2)+
geom_text(data=WEO_TFCCO2.indexminmax[Year.x %in% c(2005:2050) & Region %in% c( "EU") & Carrier=="Total" & Indicator=="Industry" & Scenario=="2DS"], aes(y=ymin+5, x=Region), label="EU Industry emissions for 2DS scenario [WEO 2018]", colour="black", size=5)+
geom_hline(yintercept=100)+
geom_hline(yintercept=0)+
ggtitle(bquote("CO2 emissions for TFC")) +
xlab(" \n Regions") + ylab("Index (2010=100) \n ")+
#facet_wrap(~Region, nrow=1)+
scale_fill_manual(
values=c('#d7191c','#fdae61','#2ca25f','#abd9e9','#2c7bb6', 'black'))+
scale_colour_manual(
values=c('#d7191c','#fdae61','#2ca25f','#abd9e9','#2c7bb6', 'black')) +
guides(colour = element_blank()) +
coord_cartesian(ylim=c(0:150)) +
theme_bw() +
theme(
axis.text.x = element_text(angle = 45, size=12,  hjust=1),
axis.title.y = element_text(size=13),
axis.title.x = element_text(size=13),
axis.text.y = element_text(size=12),
strip.text.x = element_text(size=12, face="bold"),
strip.text.y = element_text(size=12, face="bold"),
legend.text= element_text(size=12),
legend.title=element_text(size=13,  face="bold"),
plot.title=element_text(size=16, hjust=0.5, face="bold"),
plot.subtitle=element_text(size=14,hjust=0.5),
panel.border = element_rect(colour = "black", size=1),
legend.key =  element_rect(fill = 'white', size = 0.5),
strip.background = element_rect(colour="white", fill="#FFFFFF")
)
print(WEO_TFC_CO2_MINMAXreg)
library("gganimate")
library("gifski")
library("glue")
WEO_TFC_CO2_MINMAXreg.animate <- WEO_TFC_CO2_MINMAXreg +
transition_time(Year.x) +
labs(title = 'Year: {frame_time} \n World Energy Outlook 2014-2018 (length of bars)  \n Indexed CO2 emissions for TFC (2010=100) \n')
# animate in a two step process:
animate(WEO_TFC_CO2_MINMAXreg.animate, height = 600, width = 700)
anim_save("Animate_CO2.gif")
View(ALLWEOCO2)
View(ALLWEOCO2dat)
# Clear memory
rm(list=ls()) # clear memory
####### Set working directory (all files should be in same level as script)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
############################################################################
# Requirements
# Plotting and transforming
library(dplyr)
library(data.table)
# Plotting packages
library(ggplot2)
############################################################################
#install.packages("readxl")
library("readxl")
############################################################################
# Your file(s)
# Mind: it has to be xls or xlsx
WEO_versions <- c( "WEO2018_AnnexA.xlsx", "WEO2017_AnnexA.xlsx", "WEO2016_AnnexA.xlsx", "WEO2015_AnnexA.xlsx", "WEO2014_AnnexA.xlsx")
############################################################################
## CO2 emissions (Mt)
############################################################################
ALLWEOCO2 <- lapply(WEO_versions, function(j) {
WEODatasheets <- excel_sheets(j)
WEODatasheets <- WEODatasheets[grepl(c("_El"), WEODatasheets)]
# xlsx files
#Collecting all New Policies (Baseline)
CO2DATA.newpol <- lapply( WEODatasheets, function(i) {
WEO2018_CO2_0 <- read_excel(j,  sheet=i, range = if (as.numeric(substr(j, 4,7)) < 2017 ) {"A36:H56"} else {"A38:H56"} )
WEO2018_CO2_0$Scenario <- "New Policies Scenarios"
reg  <- gsub("_El_CO2_Ind", "", i, fixed=TRUE)
reg  <- gsub("_Elec_CO2_Ind", "", reg, fixed=TRUE)
reg  <- gsub("_Elec_Ind_CO2", "", reg, fixed=TRUE)
reg  <- gsub("_Elec_CO2", "", reg, fixed=TRUE)
WEO2018_CO2_0$Region <- reg
WEO2018_CO2_0=data.table(WEO2018_CO2_0)
setnames(WEO2018_CO2_0, "..1", "Carrier",  skip_absent=TRUE)
WEO2018_CO2_0=WEO2018_CO2_0[!Carrier=="Of which: bunkers"]
WEO2018_CO2_0$Indicator <- c( "Total CO2",	"Total CO2",	"Total CO2",	"Total CO2",	"Power generation",	"Power generation",	"Power generation",	"Power generation",	"TFC",	"TFC",	"TFC",	"TFC",	"TFC",		"Industry",	"Transport", "Buildings")
WEO2018_CO2_0 <- data.table(WEO2018_CO2_0)
})
CO2DATA.newpoldat <- rbindlist(CO2DATA.newpol)
#Collecting all Current policies
CO2DATA.curpol <- lapply( WEODatasheets, function(i) {
WEO2018_CO2_0 <- read_excel(j,  sheet=i, range =  if (as.numeric(substr(j, 4,7)) < 2017 ) {"M36:P56"} else {"M38:Q56"}  )
WEO2018_CO2_0$Scenario <- "Current Policies"
reg  <- gsub("_El_CO2_Ind", "", i, fixed=TRUE)
reg  <- gsub("_Elec_CO2_Ind", "", reg, fixed=TRUE)
reg  <- gsub("_Elec_Ind_CO2", "", reg, fixed=TRUE)
reg  <- gsub("_Elec_CO2", "", reg, fixed=TRUE)
WEO2018_CO2_0$Region <- reg
WEO2018_CO2_0=data.table(WEO2018_CO2_0)
setnames(WEO2018_CO2_0, "..1", "Carrier",  skip_absent=TRUE)
WEO2018_CO2_0=WEO2018_CO2_0[!Carrier=="Of which: bunkers"]
WEO2018_CO2_0$Indicator <- c( "Total CO2",	"Total CO2",	"Total CO2",	"Total CO2",	"Power generation",	"Power generation",	"Power generation",	"Power generation",	"TFC",	"TFC",	"TFC",	"TFC",	"TFC",		"Industry",	"Transport", "Buildings")
WEO2018_CO2_0 <- data.table(WEO2018_CO2_0)
})
CO2DATA.curpoldat <- rbindlist(CO2DATA.curpol)
CO2DATA.curpoldat <- cbind(CO2DATA.curpoldat,CO2DATA.newpoldat[,2:3])
#Collecting all Sustainable development scenario
CO2DATA.2DS <- lapply( WEODatasheets, function(i) {
WEO2018_CO2_0 <- read_excel(j,  sheet=i, range = if (as.numeric(substr(j, 4,7)) < 2017 ) {"Q36:S56"} else {"Q38:U56"}  )
WEO2018_CO2_1 <- read_excel(j,  sheet=i, range = if (as.numeric(substr(j, 4,7)) < 2017 ) {"M36:M56"} else {"M38:M56"}  )
WEO2018_CO2_2 <- read_excel(j,  sheet=i, range = if (as.numeric(substr(j, 4,7)) < 2017 ) {"B36:C56"} else {"B38:C56"}  )
WEO2018_CO2_0$Scenario <- "2DS"
WEO2018_CO2_0 <- cbind(WEO2018_CO2_0, WEO2018_CO2_1,WEO2018_CO2_2)
reg  <- gsub("_El_CO2_Ind", "", i, fixed=TRUE)
reg  <- gsub("_Elec_CO2_Ind", "", reg, fixed=TRUE)
reg  <- gsub("_Elec_Ind_CO2", "", reg, fixed=TRUE)
reg  <- gsub("_Elec_CO2", "", reg, fixed=TRUE)
WEO2018_CO2_0$Region <- reg
WEO2018_CO2_0=data.table(WEO2018_CO2_0)
setnames(WEO2018_CO2_0, "..1", "Carrier",  skip_absent=TRUE)
WEO2018_CO2_0=WEO2018_CO2_0[!Carrier=="Of which: bunkers"]
WEO2018_CO2_0$Indicator <- c( "Total CO2",	"Total CO2",	"Total CO2",	"Total CO2",	"Power generation",	"Power generation",	"Power generation",	"Power generation",	"TFC",	"TFC",	"TFC",	"TFC",	"TFC",		"Industry",	"Transport", "Buildings")
WEO2018_CO2_0 <- data.table(WEO2018_CO2_0)
})
CO2DATA.2DSdat <- rbindlist(CO2DATA.2DS)
### Compiling to 1 dataset (to Long Table)
WEOCO2.LT.2DS=melt(CO2DATA.2DSdat,  id.vars=c("Scenario","Region","Carrier", "Indicator"), variable.name="Year")
WEOCO2.LT.curpol=melt(CO2DATA.curpoldat,  id.vars=c("Scenario","Region","Carrier", "Indicator"), variable.name="Year")
WEOCO2.LT.newpol=melt(CO2DATA.newpoldat,  id.vars=c("Scenario","Region","Carrier", "Indicator"), variable.name="Year")
CO2DATA.WEO=rbind(WEOCO2.LT.newpol,WEOCO2.LT.curpol,WEOCO2.LT.2DS)
CO2DATA.WEO <- na.omit(CO2DATA.WEO)
# Replacing top names with Totals
CO2DATA.WEO= CO2DATA.WEO[Carrier %in% c(unique(CO2DATA.WEO$Indicator)), Carrier:=c(rep("Total", length(unique(CO2DATA.WEO$Indicator))*length(unique(WEODatasheets))))]
CO2DATA.WEO$WEOYR <- c(as.numeric(substr(j, 4, 7)))
CO2DATA.WEO=data.table(CO2DATA.WEO)
})
ALLWEOCO2dat  <- rbindlist(ALLWEOCO2)
## now we start to data clean
ALLWEOCO2dat$filter <- paste(ALLWEOCO2dat$Scenario, ALLWEOCO2dat$Year, ALLWEOCO2dat$WEOYR)
ALLWEOCO2dat$Year <- as.character(ALLWEOCO2dat$Year)
ALLWEOCO2dat=ALLWEOCO2dat[!Year %in% c("..5")]
ALLWEOCO2dat=ALLWEOCO2dat[!filter %in% c("2DS 2040..1 2018", "Current Policies 2025..5 2017", "2DS 2040..4 2017", "Current Policies 2020..5 2016", "2DS 2040..4 2016", "Current Policies 2020..5 2015", "2DS 2040..4 2015", "Current Policies 2020..5 2014", "2DS 2040..4 2014")]
ALLWEOCO2dat$Year <- as.numeric(substr(ALLWEOCO2dat$Year, 1,4))
ALLWEOCO2dat$value <- as.numeric(ALLWEOCO2dat$value)
##########################################################################
## Write table
write.table(ALLWEOCO2dat, file="Compilation_WEO_Elec_CO2.csv", dec=".", sep=";", row.names=FALSE)
##########################################################################
####### Set working directory (all files should be in same level as script)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
setwd("/mnt/y/Kennisbasis/IMAGE/model/Timer/ontwapps_Timer/Users/Mariesse/R/Functions")
# Clear memory
rm(list=ls()) # clear memory
####### Set working directory (all files should be in same level as script)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
############################################################################
# Requirements
# Plotting and transforming
library(dplyr)
library(data.table)
# Plotting packages
library(ggplot2)
library(devtools)
#devtools::install_github("cmartin/ggConvexHull")
library(ggConvexHull)
############################################################################
#install.packages("readxl")
library("readxl")
############################################################################
# Your file(s)
# Mind: it has to be xls or xlsx
WEO_versions <- c( "WEO2018_AnnexA.xlsx", "WEO2017_AnnexA.xlsx", "WEO2016_AnnexA.xlsx", "WEO2015_AnnexA.xlsx", "WEO2014_AnnexA.xlsx")
############################################################################
## CO2 emissions (Mt)
############################################################################
ALLWEOCO2 <- lapply(WEO_versions, function(j) {
WEODatasheets <- excel_sheets(j)
WEODatasheets <- WEODatasheets[grepl(c("_El"), WEODatasheets)]
# xlsx files
#Collecting all New Policies (Baseline)
CO2DATA.newpol <- lapply( WEODatasheets, function(i) {
WEO2018_CO2_0 <- read_excel(j,  sheet=i, range = if (as.numeric(substr(j, 4,7)) < 2017 ) {"A36:H56"} else {"A38:H56"} )
WEO2018_CO2_0$Scenario <- "New Policies Scenarios"
reg  <- gsub("_El_CO2_Ind", "", i, fixed=TRUE)
reg  <- gsub("_Elec_CO2_Ind", "", reg, fixed=TRUE)
reg  <- gsub("_Elec_Ind_CO2", "", reg, fixed=TRUE)
reg  <- gsub("_Elec_CO2", "", reg, fixed=TRUE)
WEO2018_CO2_0$Region <- reg
WEO2018_CO2_0=data.table(WEO2018_CO2_0)
setnames(WEO2018_CO2_0, "..1", "Carrier",  skip_absent=TRUE)
WEO2018_CO2_0=WEO2018_CO2_0[!Carrier=="Of which: bunkers"]
WEO2018_CO2_0$Indicator <- c( "Total CO2",	"Total CO2",	"Total CO2",	"Total CO2",	"Power generation",	"Power generation",	"Power generation",	"Power generation",	"TFC",	"TFC",	"TFC",	"TFC",	"TFC",		"Industry",	"Transport", "Buildings")
WEO2018_CO2_0 <- data.table(WEO2018_CO2_0)
})
CO2DATA.newpoldat <- rbindlist(CO2DATA.newpol)
#Collecting all Current policies
CO2DATA.curpol <- lapply( WEODatasheets, function(i) {
WEO2018_CO2_0 <- read_excel(j,  sheet=i, range =  if (as.numeric(substr(j, 4,7)) < 2017 ) {"M36:P56"} else {"M38:Q56"}  )
WEO2018_CO2_0$Scenario <- "Current Policies"
reg  <- gsub("_El_CO2_Ind", "", i, fixed=TRUE)
reg  <- gsub("_Elec_CO2_Ind", "", reg, fixed=TRUE)
reg  <- gsub("_Elec_Ind_CO2", "", reg, fixed=TRUE)
reg  <- gsub("_Elec_CO2", "", reg, fixed=TRUE)
WEO2018_CO2_0$Region <- reg
WEO2018_CO2_0=data.table(WEO2018_CO2_0)
setnames(WEO2018_CO2_0, "..1", "Carrier",  skip_absent=TRUE)
WEO2018_CO2_0=WEO2018_CO2_0[!Carrier=="Of which: bunkers"]
WEO2018_CO2_0$Indicator <- c( "Total CO2",	"Total CO2",	"Total CO2",	"Total CO2",	"Power generation",	"Power generation",	"Power generation",	"Power generation",	"TFC",	"TFC",	"TFC",	"TFC",	"TFC",		"Industry",	"Transport", "Buildings")
WEO2018_CO2_0 <- data.table(WEO2018_CO2_0)
})
CO2DATA.curpoldat <- rbindlist(CO2DATA.curpol)
CO2DATA.curpoldat <- cbind(CO2DATA.curpoldat,CO2DATA.newpoldat[,2:3])
#Collecting all Sustainable development scenario
CO2DATA.2DS <- lapply( WEODatasheets, function(i) {
WEO2018_CO2_0 <- read_excel(j,  sheet=i, range = if (as.numeric(substr(j, 4,7)) < 2017 ) {"Q36:S56"} else {"Q38:U56"}  )
WEO2018_CO2_1 <- read_excel(j,  sheet=i, range = if (as.numeric(substr(j, 4,7)) < 2017 ) {"M36:M56"} else {"M38:M56"}  )
WEO2018_CO2_2 <- read_excel(j,  sheet=i, range = if (as.numeric(substr(j, 4,7)) < 2017 ) {"B36:C56"} else {"B38:C56"}  )
WEO2018_CO2_0$Scenario <- "2DS"
WEO2018_CO2_0 <- cbind(WEO2018_CO2_0, WEO2018_CO2_1,WEO2018_CO2_2)
reg  <- gsub("_El_CO2_Ind", "", i, fixed=TRUE)
reg  <- gsub("_Elec_CO2_Ind", "", reg, fixed=TRUE)
reg  <- gsub("_Elec_Ind_CO2", "", reg, fixed=TRUE)
reg  <- gsub("_Elec_CO2", "", reg, fixed=TRUE)
WEO2018_CO2_0$Region <- reg
WEO2018_CO2_0=data.table(WEO2018_CO2_0)
setnames(WEO2018_CO2_0, "..1", "Carrier",  skip_absent=TRUE)
WEO2018_CO2_0=WEO2018_CO2_0[!Carrier=="Of which: bunkers"]
WEO2018_CO2_0$Indicator <- c( "Total CO2",	"Total CO2",	"Total CO2",	"Total CO2",	"Power generation",	"Power generation",	"Power generation",	"Power generation",	"TFC",	"TFC",	"TFC",	"TFC",	"TFC",		"Industry",	"Transport", "Buildings")
WEO2018_CO2_0 <- data.table(WEO2018_CO2_0)
})
CO2DATA.2DSdat <- rbindlist(CO2DATA.2DS)
### Compiling to 1 dataset (to Long Table)
WEOCO2.LT.2DS=melt(CO2DATA.2DSdat,  id.vars=c("Scenario","Region","Carrier", "Indicator"), variable.name="Year")
WEOCO2.LT.curpol=melt(CO2DATA.curpoldat,  id.vars=c("Scenario","Region","Carrier", "Indicator"), variable.name="Year")
WEOCO2.LT.newpol=melt(CO2DATA.newpoldat,  id.vars=c("Scenario","Region","Carrier", "Indicator"), variable.name="Year")
CO2DATA.WEO=rbind(WEOCO2.LT.newpol,WEOCO2.LT.curpol,WEOCO2.LT.2DS)
CO2DATA.WEO <- na.omit(CO2DATA.WEO)
# Replacing top names with Totals
CO2DATA.WEO= CO2DATA.WEO[Carrier %in% c(unique(CO2DATA.WEO$Indicator)), Carrier:=c(rep("Total", length(unique(CO2DATA.WEO$Indicator))*length(unique(WEODatasheets))))]
CO2DATA.WEO$WEOYR <- c(as.numeric(substr(j, 4, 7)))
CO2DATA.WEO=data.table(CO2DATA.WEO)
})
ALLWEOCO2dat  <- rbindlist(ALLWEOCO2)
## now we start to data clean
ALLWEOCO2dat$filter <- paste(ALLWEOCO2dat$Scenario, ALLWEOCO2dat$Year, ALLWEOCO2dat$WEOYR)
ALLWEOCO2dat$Year <- as.character(ALLWEOCO2dat$Year)
ALLWEOCO2dat=ALLWEOCO2dat[!Year %in% c("..5")]
ALLWEOCO2dat=ALLWEOCO2dat[!filter %in% c("2DS 2040..1 2018", "Current Policies 2025..5 2017", "2DS 2040..4 2017", "Current Policies 2020..5 2016", "2DS 2040..4 2016", "Current Policies 2020..5 2015", "2DS 2040..4 2015", "Current Policies 2020..5 2014", "2DS 2040..4 2014")]
ALLWEOCO2dat$Year <- as.numeric(substr(ALLWEOCO2dat$Year, 1,4))
ALLWEOCO2dat$value <- as.numeric(ALLWEOCO2dat$value)
##########################################################################
## Write table
write.table(ALLWEOCO2dat, file="Compilation_WEO_Elec_CO2.csv", dec=".", sep=";", row.names=FALSE)
# install from CRAN
#install.packages("rtweet")
# devtools::install_github("mkearney/rtweet") #Downloading latest from master folder
#install.packages("httpuv")
# COlorbrewer app in Rstudio
#install.packages("colorspace")
library("colorspace")
library("httpuv")
# load rtweet
library(rtweet)
# json support
library(rjson)
library(jsonlite)
# plotting and pipes - tidyverse!
library(ggplot2)  # Plot
library(dplyr)
library(tidyr)  # Tidy R
# text mining library
library(tidytext)
library(tm)   # Text mining
# coupled words analysis
library(widyr)
# plotting packages
library(igraph)
library(ggraph)
options(stringsAsFactors = FALSE)
# Some help in setting up a token
#https://cran.r-project.org/web/packages/rtweet/vignettes/auth.html
############ Starting Twitter
#create_token
#post_tweet
# search_tweet
## create token named "twitter_token" [did not work before installing mkeaney master package]
twitter_token <- create_token(
app = "RtweetStudies",
consumer_key = "cXlhBnTq1axZnsqO4ArgWdnM3",
consumer_secret = "gYJTAvHWzMDcxYLV48ncuPmATamY3OE4Usx3O4i8YNRtdBaxnY")
# ,
#   access_token="3092191180-6hcwjXBiyE7SVoHmCUVHOrr5kdi0pgYxIKq0YM6",
#   access_secret="N6Fk8IZFyE0F4RTWRFoIjFieMNDUS8M162imYoYipgS50")
###
# We use TwitteR nstead: https://davetang.org/muse/2013/04/06/using-the-r_twitter-package/
#install the necessary packages
# install.packages("twitteR")
# install.packages("wordcloud")
# install.packages("tm")
library("twitteR")
library("wordcloud")
library("tm")
install.packages("rtweet")
install.packages("wordcloud")
library("twitteR")
library("wordcloud")
install.packages("twitteR")
library("twitteR")
library("wordcloud")
library("tm")
#to get your consumerKey and consumerSecret see the twitteR documentation for instructions
consumer_key <- 'cXlhBnTq1axZnsqO4ArgWdnM3'
consumer_secret <- 'gYJTAvHWzMDcxYLV48ncuPmATamY3OE4Usx3O4i8YNRtdBaxnY'
access_token <- '3092191180-6hcwjXBiyE7SVoHmCUVHOrr5kdi0pgYxIKq0YM6'
access_secret <- 'N6Fk8IZFyE0F4RTWRFoIjFieMNDUS8M162imYoYipgS50'
setup_twitter_oauth(consumer_key,
consumer_secret,
access_token,
access_secret)
library(rtweet)
install.packages("tidytext")
# text mining library
library(tidytext)
#mulitple hashtags like "Pulp + Paper"."industry + pathways" #  lang = 'en', "fossil + free + papermaking"
hastags <- "industrialsymbiosis"
#mulitple hashtags like "Pulp + Paper"."industry + pathways" #  lang = 'en', "fossil + free + papermaking"
hastags <- "#industrialsymbiosis"
r_stats <- searchTwitter(hastags, n=1500, lang = 'en', retryOnRateLimit = 100)
#should get 1500
length(r_stats)
#save text
r_stats_text <- sapply(r_stats, function(x) x$getText())
#create corpus
r_stats_text_corpus <- Corpus(VectorSource(r_stats_text))
#clean up
r_stats_text_corpus <- tm_map(r_stats_text_corpus, content_transformer(tolower))
r_stats_text_corpus <- tm_map(r_stats_text_corpus, removePunctuation)
r_stats_text_corpus <- tm_map(r_stats_text_corpus, function(x)removeWords(x,stopwords()))
r_stats_text_corpus
#png("wordcloud_fossil_free_industry.png", width=1280,height=800)
wordcloud(r_stats_text_corpus,  scale=c(10,.8),min.freq=2,max.words=Inf, random.order=FALSE, rot.per=.15, colors=pal2)
library(RColorBrewer)
pal2 <- brewer.pal(8,"Dark2")
#png("wordcloud_fossil_free_industry.png", width=1280,height=800)
wordcloud(r_stats_text_corpus,  scale=c(10,.8),min.freq=2,max.words=Inf, random.order=FALSE, rot.per=.15, colors=pal2)
r_stats
head(r_stats)
str(r_stats)
#min.freq=2,max.words=1000, random.order=T, rot.per=.15
dev.off()
## Plot time series of all tweets aggregated by second
ts_plot(r_stats_text_corpus, by = "secs")
## Plot time series of all tweets aggregated by second
ts_plot(r_stats, by = "secs")
r_stats %>%
dplyr::group_by(screen_name) %>%
## The pipe operator allows you to combine this with ts_plot
## without things getting too messy.
ts_plot() +
ggplot2::labs(
title = "Tweets during election day for the 2016 U.S. election",
subtitle = "Tweets collected, parsed, and plotted using `rtweet`"
)
library(dplyr)
r_stats %>%
dplyr::group_by(screen_name) %>%
## The pipe operator allows you to combine this with ts_plot
## without things getting too messy.
ts_plot() +
ggplot2::labs(
title = "Tweets during election day for the 2016 U.S. election",
subtitle = "Tweets collected, parsed, and plotted using `rtweet`"
)
str(r_stats)
## Plot time series of all tweets aggregated by second
## plot multiple time series by first filtering the data using
## regular expressions on the tweet "text" variable
r_stats %>%
dplyr::group_by(screenName) %>%
## The pipe operator allows you to combine this with ts_plot
## without things getting too messy.
ts_plot() +
ggplot2::labs(
title = "Tweets during election day for the 2016 U.S. election",
subtitle = "Tweets collected, parsed, and plotted using `rtweet`"
)
## Plot time series of all tweets aggregated by second
## plot multiple time series by first filtering the data using
## regular expressions on the tweet "text" variable
r_stats = data.table(r_stats)
r_stats %>%
dplyr::group_by(screenName) %>%
## The pipe operator allows you to combine this with ts_plot
## without things getting too messy.
ts_plot() +
ggplot2::labs(
title = "Tweets during election day for the 2016 U.S. election",
subtitle = "Tweets collected, parsed, and plotted using `rtweet`"
)
str(r_stats)
glimpse(r_stats)
dplyr::glimpse(rtweet_folks)
dplyr::glimpse(r_stats)
unique(rstats_tweets$screen_name)
unique(rstats_tweets$screenName)
unique(r_stats$screen_name)
unique(r_stats$screenName)
r_stats
r_stats <- searchTwitter(hastags, n=1500, lang = 'en', retryOnRateLimit = 100)
unique(r_stats$screenName)
str(r_stats)
rstats_tweets <- search_tweets(q = hashtags,
n = 500)
rstats_tweets <- search_tweets(q = hastags,
n = 500)
# whatever name you assigned to your created app
appname <- "RtweetStudies"
## api key (example below is not a real key)
key <- 'cXlhBnTq1axZnsqO4ArgWdnM3'
## api secret (example below is not a real key)
secret <- 'gYJTAvHWzMDcxYLV48ncuPmATamY3OE4Usx3O4i8YNRtdBaxnY'
# create token named "twitter_token"
twitter_token <- create_token(
app = appname,
consumer_key = key,
consumer_secret = secret)
twitter_token <- create_token(
app = appname,
consumer_key = key,
consumer_secret = secret)
twitter_token <- create_token(
app = appname,
consumer_key = key,
consumer_secret = secret)
# whatever name you assigned to your created app
appname <- "RtweetStudies"
## api key (example below is not a real key)
key <- 'XsUTxqZNWovUgkNsFctSasLb7'
## api secret (example below is not a real key)
secret <- 'XKg0X52FKVEPMBh4lvMIJZaD0qVuj56vaaPLhsWsJ03xLiZnpD'
twitter_token <- create_token(
app = appname,
consumer_key = key,
consumer_secret = secret)
