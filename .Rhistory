y="MtCO2/yr") +
facet_wrap(~ Scenario, ncol=2) +
theme(axis.text.x = element_text(angle=45, hjust=1),
text = element_text(size=14))
ggplotly(INDUSDEMTot)
INDUSDEMTot <-   INDUSDEM %>%
#filter(grepl("emissions", tolower(Variable), fixed=T)) %>%
#filter(!grepl("cokes", tolower(Variable), fixed=T)) %>%
separate(Variable, c("X", "Y", "Z", "A", "Industry", "TMI"), sep = "[|]") %>%
filter(is.na(TMI)==T) %>%
filter(Region=="EU" ) %>%
ggplot()+
geom_area(aes(x=Year, y=value, colour=Industry, group=Industry), position="stack") +
labs(title="CO2 Emissions",
x="Year",
y="MtCO2/yr") +
facet_wrap(~ Scenario, ncol=2) +
theme(axis.text.x = element_text(angle=45, hjust=1),
text = element_text(size=14))
ggplotly(INDUSDEMTot)
INDUSDEMTot <-   INDUSDEM %>%
#filter(grepl("emissions", tolower(Variable), fixed=T)) %>%
#filter(!grepl("cokes", tolower(Variable), fixed=T)) %>%
separate(Variable, c("X", "Y", "Z", "A", "Industry", "TMI"), sep = "[|]") %>%
filter(is.na(TMI)==T) %>%
filter(Region=="EU" ) %>%
ggplot()+
geom_area(aes(x=Year, y=value,  fill=Industry), position="stack", colour="black") +
labs(title="CO2 Emissions",
x="Year",
y="MtCO2/yr") +
facet_wrap(~ Scenario, ncol=2) +
theme(axis.text.x = element_text(angle=45, hjust=1),
text = element_text(size=14))
ggplotly(INDUSDEMTot)
INDUSDEMTot <-   INDUSDEM %>%
#filter(grepl("emissions", tolower(Variable), fixed=T)) %>%
#filter(!grepl("cokes", tolower(Variable), fixed=T)) %>%
separate(Variable, c("X", "Y", "Z", "A", "Industry", "TMI"), sep = "[|]") %>%
filter(is.na(TMI)==T) %>%
filter(Region=="EU" ) %>%
ggplot()+
geom_line(aes(x=Year, y=value,  group=Scenario, colour=Scenario)) +
labs(title="CO2 Emissions",
x="Year",
y="MtCO2/yr") +
facet_wrap(~ Industry, ncol=2) +
theme(axis.text.x = element_text(angle=45, hjust=1),
text = element_text(size=14))
ggplotly(INDUSDEMTot)
ECONCO2 <- SCENdat %>%
filter(grepl("Emissions|CO2", Variable, fixed=T))
head(ECONCO2)
unique(ECONCO2$Variable)
ECONCO2 %>%
#filter(grepl("emissions", tolower(Variable), fixed=T)) %>%
filter(!grepl("Emissions|CO2|",Variable, fixed=T))
ECONCO2Tot <-   ECONCO2 %>%
#filter(grepl("emissions", tolower(Variable), fixed=T)) %>%
filter(!grepl("Emissions|CO2|",Variable, fixed=T)) %>%
filter(Region=="EU" ) %>%
ggplot()+
geom_line(aes(x=Year, y=value,  group=Scenario, colour=Scenario)) +
labs(title="CO2 Emissions",
x="Year",
y="MtCO2/yr") +
facet_wrap(~ Variable, ncol=2) +
theme(axis.text.x = element_text(angle=45, hjust=1),
text = element_text(size=14))
ECONCO2Tot <-   ECONCO2 %>%
#filter(grepl("emissions", tolower(Variable), fixed=T)) %>%
filter(!grepl("Emissions|CO2|",Variable, fixed=T)) %>%
filter(Region=="EU" ) %>%
ggplot()+
geom_line(aes(x=Year, y=value,  group=Scenario, colour=Scenario)) +
labs(title="CO2 Emissions",
x="Year",
y="MtCO2/yr") +
facet_wrap(~ Variable, ncol=2) +
theme(axis.text.x = element_text(angle=45, hjust=1),
text = element_text(size=14))
ggplotly(ECONCO2Tot)
# Clear memory
rm(list=ls()) # clear memory
# Working directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#######################################################################################################################
### Install and/or load required packages / dependencies
#######################################################################################################################Installing
if(!require(devtools)){install.packages("devtools");   library(devtools)}
# Easy scripting packages
if(!require(dplyr)){install.packages("dplyr");   library(dplyr)}
if(!require(forcats)){install.packages("forcats");  library(forcats)}
if(!require(data.table)){install.packages("data.table");  library(data.table)}
if(!require(tidyr)){install.packages("tidyr");  library(tidyr)}
if(!require(fuzzyjoin)){install.packages("fuzzyjoin");  library(fuzzyjoin)}
if(!require(stringr)){install.packages("stringr");  library(stringr)}
if(!require(rlang)){install.packages("rlang");  library(rlang)}
# text mining packages
if(!require(tidytext)){install.packages("tidytext");  library(tidytext)}
if(!require(tm)){install.packages("tm");  library(tm)}
if(!require(readxl)){install.packages("readxl");  library(readxl)}
if(!require(tabulizer)){install.packages("tabulizer");  library(tabulizer)}
if(!require(randomNames)){install.packages("randomNames");  library(randomNames)}
# Social Media analysis
if(!require(rtweet)){install.packages("rtweet");  library(rtweet)}
if(!require(trendyy)){install.packages("trendyy");  library(trendyy)}
if(!require(gtrendsR)){install.packages("gtrendsR");  library(gtrendsR)}
# API reading and online toolng
if(!require(googledrive)){install.packages("googledrive");  library(googledrive)}
if(!require(googlesheets4)){install_github("tidyverse/googlesheets4");  library(googlesheets4)}
if(!require(rscopus)){install.packages("rscopus");  library(rscopus)}
if(!require(orcid)){install.packages("orcid");  library(orcid)}
if(!require(scholar)){install.packages("scholar");  library(scholar)}
# data visualisation packages
if(!require(ggplot2)){install.packages("ggplot2");  library(ggplot2)}
if(!require(ggforce)){install.packages("ggforce");  library(ggforce)}
if(!require(plotly)){install.packages("plotly");  library(plotly)}
if(!require(paletteer)){install.packages("paletteer");  library(paletteer)}
if(!require(ggrepel)){install.packages("ggrepel");  library(ggrepel)}
if(!require(igraph)){install.packages("igraph");  library(igraph)}
if(!require(ggraph)){install.packages("ggraph");  library(ggraph)}
if(!require(ggforce)){install.packages("ggforce");  library(ggforce)}
if(!require(shadowtext)){install.packages("shadowtext");  library(shadowtext)}
if(!require(gganimate)){install.packages("gganimate");  library(gganimate)}
if(!require(gifski)){install.packages("gifski");  library(gifski)}
#if(!require(sf)){install.packages("sf");  library(sf)}
# MyM cnversion packages
#if(!require(mym2r)){install_github("marieyesse/mym2r");  library(mym2r)}
#######################################################################################################################
### Functions (see repository "Timer_tools")
#######################################################################################################################
## Helper function "interpolate"
interpolate <- function(df, startyear, endyear){
df.intrapolate=seq(unique(df$Year)[1],endyear)
## Activate data.table package ###
dfreal=data.table(df)
#Intrapolatie with approximate
dfreal = dfreal[,list(approx(x=Year,y=value,xout=df.intrapolate)$y,
approx(x=Year,y=value,xout=df.intrapolate)$x),
by=eval(dput(names(dfreal[, -c("Year", "value")])))]
setnames(dfreal,"V1","value")
setnames(dfreal,"V2","Year")
dfreal=data.table(dfreal)
}
cemis <- function(df, startyear, endyear){
df.intrapolate=seq(unique(df$Year)[1],endyear)
## Activate data.table package ###
dfreal=data.table(df)
#Intrapolatie with approximate
dfreal = dfreal[,list(approx(x=Year,y=value,xout=df.intrapolate)$y,
approx(x=Year,y=value,xout=df.intrapolate)$x),
by=eval(dput(names(dfreal[, -c("Year", "value")])))]
setnames(dfreal,"V1","value")
setnames(dfreal,"V2","Year")
dfreal=data.table(dfreal)
df = dfreal[Year %in% c(startyear:endyear)] %>%
group_by_at(names(dfreal[, -c("Year", "value")])) %>%
mutate(CEMIS=cumsum(value))
df = data.table(df)
}
ALLFILES <-list.files(path = "roadmaps")
TotalPDFsteps <- length(ALLFILES) / 12
ALLFILES_labeled <- ALLFILES %>%
data.table() %>%
mutate(Steps = rep(randomNames(TotalPDFsteps),TotalPDFsteps-1))
if(!require(randomNames)){install.packages("randomNames");  library(randomNames)}
ALLFILES_labeled <- ALLFILES %>%
data.table() %>%
mutate(Steps = rep(randomNames(TotalPDFsteps),TotalPDFsteps-1))
TotalPDFsteps <- as.integer(length(ALLFILES) / 12)
ALLFILES_labeled <- ALLFILES %>%
data.table() %>%
mutate(Steps = rep(randomNames(TotalPDFsteps),TotalPDFsteps-1))
ALLFILES_labeled <- ALLFILES %>%
data.table() %>%
mutate(Steps = rep(randomNames(TotalPDFsteps),TotalPDFsteps))
ALLFILES_labeled <- ALLFILES %>%
data.table() %>%
mutate(Steps = rep(randomNames(TotalPDFsteps),12))
TotalPDFsteps <- length(ALLFILES) / 12
ALLFILES_labeled <- ALLFILES %>%
data.table() %>%
mutate(Steps = rep(randomNames(TotalPDFsteps),12))
unique(randomNames(TotalPDFsteps))
ALLFILES_labeled <- ALLFILES %>%
data.table() %>%
mutate(Steps = rep(randomNames(TotalPDFsteps),13))
TotalPDFsteps <- as.integer(length(ALLFILES) / 12)
AllowablePFDsperLoop = 12
AllowablePFDsperLoop = 12
TotalPDFsteps <- as.integer(length(ALLFILES) / AllowablePFDsperLoop)
ALLFILES_labeled <- ALLFILES %>%
data.table() %>%
mutate(Steps = rep(randomNames(TotalPDFsteps),AllowablePFDsperLoop+ifelse((length(ALLFILES) / AllowablePFDsperLoop)/TotalPDFsteps) >1, 1,0))
ALLFILES_labeled <- ALLFILES %>%
data.table() %>%
mutate(Steps = rep(randomNames(TotalPDFsteps),AllowablePFDsperLoop+ifelse(((length(ALLFILES) / AllowablePFDsperLoop)/TotalPDFsteps) > 1, 1,0)))
AllowablePFDsperLoop = 12
TotalPDFsteps <- as.integer(length(ALLFILES) / AllowablePFDsperLoop)
ALLFILES_labeled <- ALLFILES %>%
data.table() %>%
mutate(Steps = rep(randomNames(TotalPDFsteps), AllowablePFDsperLoop))
ALLFILES_labeled <- ALLFILES %>%
data.table() %>%
mutate(Steps = rep(randomNames(TotalPDFsteps), AllowablePFDsperLoop+0.25))
ALLFILES_labeled <- ALLFILES %>%
data.table() %>%
mutate(Steps = rep_len(randomNames(TotalLoopSteps), AllowablePFDsperLoop))
AllowablePFDsperLoop = 12
TotalLoopSteps <- as.integer(length(ALLFILES) / AllowablePFDsperLoop)
ALLFILES_labeled <- ALLFILES %>%
data.table() %>%
mutate(Steps = rep_len(randomNames(TotalLoopSteps), AllowablePFDsperLoop))
ALLFILES_labeled <- ALLFILES %>%
data.table() %>%
mutate(Steps = rep_len(randomNames(TotalLoopSteps), length.out = .))
AllowablePFDsperLoop = 12
TotalLoopSteps <- as.integer(length(ALLFILES) / AllowablePFDsperLoop)
ALLFILES_labeled <- ALLFILES %>%
data.table() %>%
mutate(Steps = rep_len(randomNames(TotalLoopSteps), length.out = length(ALLFILES) ))
View(ALLFILES_labeled)
unique(ALLFILES_labeled$Steps)
PDFList = list()
for (i in unique(ALLFILES_labeled$Steps)){
PDFCorpus <- lapply(unique(ALLFILES_labeled %>%
filter(Steps==i) %>%
select(-Steps) %>%
unlist()), function(x){
dat=data.table(dat=c(extract_text(paste("roadmaps/", x, sep=""))),
title=x,
source=c(gsub("^(.*?\\d{4}).*","\\1", x))) %>%
mutate(source=gsub("_", " ", source), title=gsub("_", " ", title))
})
PDFList[[length(PDFList)+1]] = PDFCorpus
}
View(ALLFILES_labeled)
# -------------
PDFCorpusTEST <- lapply(unique(ALLFILES_labeled %>% filter(grepl("Easly", Steps)) %>% select(-Steps) %>% unlist()), function(x){
dat=data.table(dat=c(extract_text(paste("roadmaps/", x, sep=""))),
title=x,
source=c(gsub("^(.*?\\d{4}).*","\\1", x))) %>%
mutate(source=gsub("_", " ", source), title=gsub("_", " ", title))
})
# -------------
PDFCorpusTEST <- lapply(unique(ALLFILES_labeled %>% filter(grepl("Easley", Steps)) %>% select(-Steps) %>% unlist()), function(x){
dat=data.table(dat=c(extract_text(paste("roadmaps/", x, sep=""))),
title=x,
source=c(gsub("^(.*?\\d{4}).*","\\1", x))) %>%
mutate(source=gsub("_", " ", source), title=gsub("_", " ", title))
})
ALLFILES_labeled <- ALLFILES %>%
data.table() %>%
mutate(Steps = rep_len(randomNames(AllowablePFDsperLoop), length.out = length(ALLFILES) ))
PDFList = list()
for (i in unique(ALLFILES_labeled$Steps)){
PDFCorpus <- lapply(unique(ALLFILES_labeled %>%
filter(Steps==i) %>%
select(-Steps) %>%
unlist()), function(x){
dat=data.table(dat=c(extract_text(paste("roadmaps/", x, sep=""))),
title=x,
source=c(gsub("^(.*?\\d{4}).*","\\1", x))) %>%
mutate(source=gsub("_", " ", source), title=gsub("_", " ", title))
})
PDFList[[length(PDFList)+1]] = PDFCorpus
}
TotalPDFCorpus <- rbindlist(PDFList)
TotalPDFCorpus <- rbindlist(PDFList, fill=TRUE)
View(PDFList)
AllowablePFDsperLoop = 7
TotalLoopSteps <- as.integer(length(ALLFILES) / AllowablePFDsperLoop)
ALLFILES_labeled <- ALLFILES %>%
data.table() %>%
mutate(Steps = rep_len(randomNames(TotalLoopSteps), length.out = length(ALLFILES) ))
TotalPDFCorpus <- rbindlist(PDFList, fill=TRUE)
TotalPDFCorpus <- rbindlist(PDFList, fill=TRUE, use.names=TRUE)
View(PDFList)
# Empty List
PDFList = list()
# Run Loop on list
for (i in unique(ALLFILES_labeled$Steps)){
PDFCorpus <- lapply(unique(ALLFILES_labeled %>%
filter(Steps==i) %>%
select(-Steps) %>%
unlist()), function(x){
dat=data.table(dat=c(extract_text(paste("roadmaps/", x, sep=""))),
title=x,
source=c(gsub("^(.*?\\d{4}).*","\\1", x))) %>%
mutate(source=gsub("_", " ", source), title=gsub("_", " ", title))
})
PDFCorpuslist <- rbindlist(PDFCorpus)
PDFList[[length(PDFList)+1]] = PDFCorpuslist
}
TotalPDFCorpus <- rbindlist(PDFList, fill=TRUE, use.names=TRUE)
##############################################################################################################################
## Test words
##############################################################################################################################
## straight from Google Sheets
# using same token for google sheets as for Google Drive
sheets_auth(token = drive_auth())
Veelen_Sluisveld <- drive_get("Anticipation paper Classification")
word_matrix <- read_sheet(Veelen_Sluisveld, sheet="Kopie van Blad1")
Date <- format(Sys.Date(), format="%d-%m-%Y")
word_matrix$Download <- Date
#
# write.table(word_matrix, paste("Veelen_Sluisveld_Word_martrix_", Date, ".csv", sep=""), sep=";", dec=",")
#word_matrix <- read.csv("anticipation_paper_lingo.csv", sep=",", dec=".")
##############################################################################################################################
#######################################################################################################################
# THIS FILE: Analyses all the REINVENT narrative scenarios
# DATE: May 2020
#######################################################################################################################
# # Clear memory
# rm(list=ls()) # clear memory
#
# # Working directory
# setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#
setwd("/mnt/y/Kennisbasis/IMAGE/model/users/mariesse/R/GitHub/marieyesse.github.io-master/marieyesse.github.io")
#######################################################################################################################
### Install and/or load required packages / dependencies
#######################################################################################################################
# Easy scripting packages
if(!require(dplyr)){install.packages("dplyr");   library(dplyr)}
if(!require(forcats)){install.packages("forcats");  library(forcats)}
if(!require(data.table)){install.packages("data.table");  library(data.table)}
if(!require(tidyr)){install.packages("tidyr");  library(tidyr)}
if(!require(fuzzyjoin)){install.packages("fuzzyjoin");  library(fuzzyjoin)}
if(!require(stringr)){install.packages("stringr");  library(stringr)}
if(!require(rlang)){install.packages("rlang");  library(rlang)}
if(!require(readr)){install.packages("readr");  library(readr)}
# text mining packages
if(!require(tidytext)){install.packages("tidytext");  library(tidytext)}
if(!require(tm)){install.packages("tm");  library(tm)}
if(!require(readxl)){install.packages("readxl");  library(readxl)}
if(!require(tabulizer)){install.packages("tabulizer");  library(tabulizer)}
# maps
if(!require(grid)){install.packages("grid"); library(grid)}
if(!require(rworldmap)){install.packages("rworldmap");  library(rworldmap)}
if(!require(geosphere)){install.packages("geosphere"); library(geosphere)}
if(!require(gpclib)){install.packages("gpclib"); library(gpclib)}
# data visualisation packages
if(!require(ggplot2)){install.packages("ggplot2");  library(ggplot2)}
if(!require(ggforce)){install.packages("ggforce");  library(ggforce)}
if(!require(plotly)){install.packages("plotly");  library(plotly)}
if(!require(paletteer)){install.packages("paletteer");  library(paletteer)}
if(!require(ggrepel)){install.packages("ggrepel");  library(ggrepel)}
if(!require(igraph)){install.packages("igraph");  library(igraph)}
if(!require(ggraph)){install.packages("ggraph");  library(ggraph)}
if(!require(ggforce)){install.packages("ggforce");  library(ggforce)}
if(!require(shadowtext)){install.packages("shadowtext");  library(shadowtext)}
#if(!require(animation)){install.packages("animation");  library(animation)}
# MyM cnversion packages
#if(!require(mym2r)){install_github("marieyesse/mym2r");  library(mym2r)}
SCEN_xlsx <-list.files(path = "../../../../../harmensytze/Projects/REINVENT/7_Reporting_Tool/outxlsx/")
SCENSdat_list <- lapply(SCEN_xlsx, function(x){
dat <- read_xlsx(path=paste("../../../../../harmensytze/Projects/REINVENT/7_Reporting_Tool/outxlsx/", x, sep=""))
dat$Scenario <- x
dat=data.table(dat)
})
SCENdat <- rbindlist(SCENSdat_list, fill=TRUE) %>%
drop_na(Model) %>%
gather(Year, value, -c(Model, Scenario, Region, Variable, Unit)) %>%
mutate(Year=as.numeric(Year), value=as.numeric(value)) %>%
mutate(Scenario=gsub(".xlsx", "", Scenario, fixed=T)) %>%
drop_na(Year) %>%
bind_rows({.} %>% filter(Region %in% c("WEU", "CEU")) %>%
group_by(Model, Scenario, Variable, Unit, Year) %>%
summarise(value=sum(value)) %>%
mutate(Region="EU")) %>%
filter(!Region == "World") %>%
bind_rows({.} %>% filter(!Region %in% c( "EU")) %>%
group_by(Model, Scenario, Variable, Unit, Year) %>%
summarise(value=sum(value)) %>%
mutate(Region="World"))
SCENINDUS <- SCENdat %>%
filter(grepl("industry", tolower(Variable), fixed=T))
INDUSDEM <- SCENdat %>%
filter(grepl(" (combustion & processing)", Variable, fixed=T))
INDUSDEM
#######################################################################################################################
# THIS FILE: Analyses all the REINVENT narrative scenarios
# DATE: May 2020
#######################################################################################################################
# # Clear memory
# rm(list=ls()) # clear memory
#
# # Working directory
# setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#
setwd("/mnt/y/Kennisbasis/IMAGE/model/users/mariesse/R/GitHub/marieyesse.github.io-master/marieyesse.github.io")
#######################################################################################################################
### Install and/or load required packages / dependencies
#######################################################################################################################
# Easy scripting packages
if(!require(dplyr)){install.packages("dplyr");   library(dplyr)}
if(!require(forcats)){install.packages("forcats");  library(forcats)}
if(!require(data.table)){install.packages("data.table");  library(data.table)}
if(!require(tidyr)){install.packages("tidyr");  library(tidyr)}
if(!require(fuzzyjoin)){install.packages("fuzzyjoin");  library(fuzzyjoin)}
if(!require(stringr)){install.packages("stringr");  library(stringr)}
if(!require(rlang)){install.packages("rlang");  library(rlang)}
if(!require(readr)){install.packages("readr");  library(readr)}
# text mining packages
if(!require(tidytext)){install.packages("tidytext");  library(tidytext)}
if(!require(tm)){install.packages("tm");  library(tm)}
if(!require(readxl)){install.packages("readxl");  library(readxl)}
if(!require(tabulizer)){install.packages("tabulizer");  library(tabulizer)}
# maps
if(!require(grid)){install.packages("grid"); library(grid)}
if(!require(rworldmap)){install.packages("rworldmap");  library(rworldmap)}
if(!require(geosphere)){install.packages("geosphere"); library(geosphere)}
if(!require(gpclib)){install.packages("gpclib"); library(gpclib)}
# data visualisation packages
if(!require(ggplot2)){install.packages("ggplot2");  library(ggplot2)}
if(!require(ggforce)){install.packages("ggforce");  library(ggforce)}
if(!require(plotly)){install.packages("plotly");  library(plotly)}
if(!require(paletteer)){install.packages("paletteer");  library(paletteer)}
if(!require(ggrepel)){install.packages("ggrepel");  library(ggrepel)}
if(!require(igraph)){install.packages("igraph");  library(igraph)}
if(!require(ggraph)){install.packages("ggraph");  library(ggraph)}
if(!require(ggforce)){install.packages("ggforce");  library(ggforce)}
if(!require(shadowtext)){install.packages("shadowtext");  library(shadowtext)}
#if(!require(animation)){install.packages("animation");  library(animation)}
# MyM cnversion packages
#if(!require(mym2r)){install_github("marieyesse/mym2r");  library(mym2r)}
SCEN_xlsx <-list.files(path = "../../../../../harmensytze/Projects/REINVENT/7_Reporting_Tool/outxlsx/")
SCENSdat_list <- lapply(SCEN_xlsx, function(x){
dat <- read_xlsx(path=paste("../../../../../harmensytze/Projects/REINVENT/7_Reporting_Tool/outxlsx/", x, sep=""))
dat$Scenario <- x
dat=data.table(dat)
})
SCENdat <- rbindlist(SCENSdat_list, fill=TRUE) %>%
drop_na(Model) %>%
gather(Year, value, -c(Model, Scenario, Region, Variable, Unit)) %>%
mutate(Year=as.numeric(Year), value=as.numeric(value)) %>%
mutate(Scenario=gsub(".xlsx", "", Scenario, fixed=T)) %>%
drop_na(Year) %>%
bind_rows({.} %>% filter(Region %in% c("WEU", "CEU")) %>%
group_by(Model, Scenario, Variable, Unit, Year) %>%
summarise(value=sum(value)) %>%
mutate(Region="EU")) %>%
filter(!Region == "World") %>%
bind_rows({.} %>% filter(!Region %in% c( "EU")) %>%
group_by(Model, Scenario, Variable, Unit, Year) %>%
summarise(value=sum(value)) %>%
mutate(Region="World"))
SCENINDUS <- SCENdat %>%
filter(grepl("industry", tolower(Variable), fixed=T))
SCENdat %>%
filter(grepl("non metallic mineral", tolower(Variable), fixed=T))
SCENCE <- SCENdat %>%
filter(grepl("non metallic mineral", tolower(Variable), fixed=T))
head(SCENCE %>%
filter(grepl("capacity", tolower(Variable), fixed=T)) )
SCENCE %>%
filter(grepl("emissions", tolower(Variable), fixed=T))
#######################################################################################################################
# THIS FILE: Analyses all the REINVENT narrative scenarios
# DATE: May 2020
#######################################################################################################################
# # Clear memory
# rm(list=ls()) # clear memory
#
# # Working directory
# setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#
setwd("/mnt/y/Kennisbasis/IMAGE/model/users/mariesse/R/GitHub/marieyesse.github.io-master/marieyesse.github.io")
#######################################################################################################################
### Install and/or load required packages / dependencies
#######################################################################################################################
# Easy scripting packages
if(!require(dplyr)){install.packages("dplyr");   library(dplyr)}
if(!require(forcats)){install.packages("forcats");  library(forcats)}
if(!require(data.table)){install.packages("data.table");  library(data.table)}
if(!require(tidyr)){install.packages("tidyr");  library(tidyr)}
if(!require(fuzzyjoin)){install.packages("fuzzyjoin");  library(fuzzyjoin)}
if(!require(stringr)){install.packages("stringr");  library(stringr)}
if(!require(rlang)){install.packages("rlang");  library(rlang)}
if(!require(readr)){install.packages("readr");  library(readr)}
# text mining packages
if(!require(tidytext)){install.packages("tidytext");  library(tidytext)}
if(!require(tm)){install.packages("tm");  library(tm)}
if(!require(readxl)){install.packages("readxl");  library(readxl)}
if(!require(tabulizer)){install.packages("tabulizer");  library(tabulizer)}
# maps
if(!require(grid)){install.packages("grid"); library(grid)}
if(!require(rworldmap)){install.packages("rworldmap");  library(rworldmap)}
if(!require(geosphere)){install.packages("geosphere"); library(geosphere)}
if(!require(gpclib)){install.packages("gpclib"); library(gpclib)}
# data visualisation packages
if(!require(ggplot2)){install.packages("ggplot2");  library(ggplot2)}
if(!require(ggforce)){install.packages("ggforce");  library(ggforce)}
if(!require(plotly)){install.packages("plotly");  library(plotly)}
if(!require(paletteer)){install.packages("paletteer");  library(paletteer)}
if(!require(ggrepel)){install.packages("ggrepel");  library(ggrepel)}
if(!require(igraph)){install.packages("igraph");  library(igraph)}
if(!require(ggraph)){install.packages("ggraph");  library(ggraph)}
if(!require(ggforce)){install.packages("ggforce");  library(ggforce)}
if(!require(shadowtext)){install.packages("shadowtext");  library(shadowtext)}
#if(!require(animation)){install.packages("animation");  library(animation)}
# MyM cnversion packages
#if(!require(mym2r)){install_github("marieyesse/mym2r");  library(mym2r)}
SCENCE <- SCENdat %>%
filter(grepl("cement", tolower(Variable), fixed=T))
SCENCE %>%
filter(grepl("emissions", tolower(Variable), fixed=T))
if(!require(gt)){install.packages("gt");  library(gt)}
devtools::install_github("rstudio/gt")
if(!require(gt)){install.packages("gt");  library(gt)}
