head(CumEMIS)
unique(CumEMIS$Variable)
CumEMIS=CumEMIS[Variable %in% c( "Emissions|CO2|Fossil Fuels and Industry|Energy Demand|Industry",
"Emissions|CO2|Iron and Steel|Direct emissions",
"Emissions|CO2|Pulp and Paper|Direct emissions",
"Emissions|CO2|Chemicals and Petrochemicals|Direct emissions",
"Emissions|CO2|Food Processing|Direct emissions",
"Emissions|CO2|Cement|Direct emissions",
"Emissions|CO2|Carbon Capture and Storage|Biomass|Energy|Supply|Electricity",
"Emissions|CO2|Carbon Capture and Storage|Biomass|Energy|Demand|Industry",
"Emissions|CO2|Carbon Capture and Storage|Fossil|Energy|Supply|Electricity",
"Emissions|CO2|Carbon Capture and Storage|Fossil|Energy|Demand|Industry",
"Emissions|CO2|Carbon Capture and Storage|Biomass|Industrial Processes|Pulp and Paper",
"Emissions|CO2|Carbon Capture and Storage|Fossil|Industrial Processes|Pulp and Paper",
"Emissions|CO2|Carbon Capture and Storage|Biomass|Industrial Processes|Iron and Steel",
"Emissions|CO2|Carbon Capture and Storage|Fossil|Industrial Processes|Iron and Steel"
)]
CumEMIS$Variable <- gsub("Emissions|CO2|Fossil Fuels and Industry|Energy Demand|", "", CumEMIS$Variable, fixed=T )
CumEMIS$Variable <- gsub("|Direct emissions", "", CumEMIS$Variable, fixed=T )
CumEMIS$Variable <- gsub("Emissions|CO2|", "", CumEMIS$Variable, fixed=T )
CumEMIS$Variable <- gsub("Emissions|CO2|Carbon Capture and Storage|", "", CumEMIS$Variable, fixed=TRUE)
CumEMIS$Variable <- gsub("Carbon Capture and Storage|", "", CumEMIS$Variable, fixed=TRUE)
CumEMIS$Variable <- gsub("|Energy|Demand", "", CumEMIS$Variable, fixed=TRUE)
CumEMIS$Variable <- gsub("Industrial Processes|", "", CumEMIS$Variable, fixed=TRUE)
CEMISanim=ggplot()+
geom_bar(data=CumEMIS[Variable %in% c("Industry") & Region %in% c("EU28")], aes(x=Scenario, y=CEMIS/1000), fill=' grey80', stat="identity", position="stack", colour="black")+
geom_bar(data=CumEMIS[Variable %in% c("Biomass|Industry") & Region %in% c("EU28") ], aes(x=Scenario, y=CEMIS/1000, fill=Variable), stat="identity", position="stack", colour="black")+
geom_bar(data=CumEMIS[Variable %in% c("Iron and Steel", "Chemicals and Petrochemicals", "Pulp and Paper", "Food Processing", " Cement") &  Region %in% c("EU28")], aes(x=Scenario, y=value/1000, fill=Variable), stat="identity", position="stack", colour="black")+
geom_hline(yintercept=0, linetype=1, size=1) +
xlab("Region") + ylab(bquote("Gt"~CO[2])) + ggtitle(bquote(bold("Cumulative"~CO[2]~"emissions since 2018"))) +
theme(
axis.text.x = element_text(angle = 45, size=12,  hjust=1),
axis.title.y = element_text(size=13),
axis.title.x = element_text(size=13),
axis.text.y = element_text(size=12),
strip.text.x = element_text(size=12, face="bold"),
strip.text.y = element_text(size=12, face="bold"),
legend.text= element_text(size=12),
legend.title=element_text(size=13,  face="bold"),
plot.title=element_text(size=16, hjust=0.5, face="bold"),
plot.subtitle=element_text(size=14,hjust=0.5),
panel.border = element_rect(colour = "black", size=1),
legend.key =  element_rect(fill = 'white', size = 0.5),
strip.background = element_rect(colour="white", fill="#FFFFFF")
) +
guides(fill=guide_legend( title="Emissions source", title.position="top", title.hjust = 0.5, override.aes=list(colour=NA))) +
theme(
legend.key = element_rect(colour="white"))
print(CEMISanim)
transition_components(Year) +
exit_reset() +
labs(title = 'Year: {substr(frame_time, 1,4)} \n Final Energy Use per Carrier')
print(CEMISanim)
CumEMIS[Variable %in% c("Industry") & Region %in% c("EU28")]
CumEMIS <- CEMIS(ALLVAR, 2018, 2100)
CumEMIS=CumEMIS[Variable %in% c( "Emissions|CO2|Fossil Fuels and Industry|Energy Demand|Industry",
"Emissions|CO2|Iron and Steel|Direct emissions",
"Emissions|CO2|Pulp and Paper|Direct emissions",
"Emissions|CO2|Chemicals and Petrochemicals|Direct emissions",
"Emissions|CO2|Food Processing|Direct emissions",
"Emissions|CO2|Cement|Direct emissions",
"Emissions|CO2|Carbon Capture and Storage|Biomass|Energy|Supply|Electricity",
"Emissions|CO2|Carbon Capture and Storage|Biomass|Energy|Demand|Industry",
"Emissions|CO2|Carbon Capture and Storage|Fossil|Energy|Supply|Electricity",
"Emissions|CO2|Carbon Capture and Storage|Fossil|Energy|Demand|Industry",
"Emissions|CO2|Carbon Capture and Storage|Biomass|Industrial Processes|Pulp and Paper",
"Emissions|CO2|Carbon Capture and Storage|Fossil|Industrial Processes|Pulp and Paper",
"Emissions|CO2|Carbon Capture and Storage|Biomass|Industrial Processes|Iron and Steel",
"Emissions|CO2|Carbon Capture and Storage|Fossil|Industrial Processes|Iron and Steel"
)]
CumEMIS$Variable <- gsub("Emissions|CO2|Fossil Fuels and Industry|Energy Demand|", "", CumEMIS$Variable, fixed=T )
CumEMIS$Variable <- gsub("|Direct emissions", "", CumEMIS$Variable, fixed=T )
CumEMIS$Variable <- gsub("Emissions|CO2|", "", CumEMIS$Variable, fixed=T )
CumEMIS$Variable <- gsub("Emissions|CO2|Carbon Capture and Storage|", "", CumEMIS$Variable, fixed=TRUE)
CumEMIS$Variable <- gsub("Carbon Capture and Storage|", "", CumEMIS$Variable, fixed=TRUE)
CumEMIS$Variable <- gsub("|Energy|Demand", "", CumEMIS$Variable, fixed=TRUE)
CumEMIS$Variable <- gsub("Industrial Processes|", "", CumEMIS$Variable, fixed=TRUE)
CumEMIS[Variable %in% c("Industry") & Region %in% c("EU28")]
CEMISanim=ggplot()+
geom_bar(data=CumEMIS[Variable %in% c("Industry") & Region %in% c("EU28")], aes(x=Scenario, y=CEMIS/1000), fill=' grey80', stat="identity", position="stack", colour="black")+
geom_bar(data=CumEMIS[Variable %in% c("Biomass|Industry") & Region %in% c("EU28") ], aes(x=Scenario, y=CEMIS/1000, fill=Variable), stat="identity", position="stack", colour="black")+
geom_bar(data=CumEMIS[Variable %in% c("Iron and Steel", "Chemicals and Petrochemicals", "Pulp and Paper", "Food Processing", " Cement") &  Region %in% c("EU28")], aes(x=Scenario, y=value/1000, fill=Variable), stat="identity", position="stack", colour="black")+
geom_hline(yintercept=0, linetype=1, size=1) +
xlab("Region") + ylab(bquote("Gt"~CO[2])) + ggtitle(bquote(bold("Cumulative"~CO[2]~"emissions since 2018"))) +
theme(
axis.text.x = element_text(angle = 45, size=12,  hjust=1),
axis.title.y = element_text(size=13),
axis.title.x = element_text(size=13),
axis.text.y = element_text(size=12),
strip.text.x = element_text(size=12, face="bold"),
strip.text.y = element_text(size=12, face="bold"),
legend.text= element_text(size=12),
legend.title=element_text(size=13,  face="bold"),
plot.title=element_text(size=16, hjust=0.5, face="bold"),
plot.subtitle=element_text(size=14,hjust=0.5),
panel.border = element_rect(colour = "black", size=1),
legend.key =  element_rect(fill = 'white', size = 0.5),
strip.background = element_rect(colour="white", fill="#FFFFFF")
) +
guides(fill=guide_legend( title="Emissions source", title.position="top", title.hjust = 0.5, override.aes=list(colour=NA))) +
theme(
legend.key = element_rect(colour="white"))
print(CEMISanim)
CumEMIS[Variable %in% c("Iron and Steel", "Chemicals and Petrochemicals", "Pulp and Paper", "Food Processing", " Cement") &  Region %in% c("EU28")]
CEMISanim=ggplot()+
geom_bar(data=CumEMIS[Variable %in% c("Industry") & Region %in% c("EU28")], aes(x=Scenario, y=CEMIS/1000), fill=' grey80', stat="identity", position="stack", colour="black")+
geom_bar(data=CumEMIS[Variable %in% c("Biomass|Industry") & Region %in% c("EU28") ], aes(x=Scenario, y=-CEMIS/1000, fill=Variable), stat="identity", position="stack", colour="black")+
geom_bar(data=CumEMIS[Variable %in% c("Iron and Steel", "Chemicals and Petrochemicals", "Pulp and Paper", "Food Processing", " Cement") &  Region %in% c("EU28")], aes(x=Scenario, y=value/1000, fill=Variable), stat="identity", position="stack", colour="black")+
geom_hline(yintercept=0, linetype=1, size=1) +
xlab("Region") + ylab(bquote("Gt"~CO[2])) + ggtitle(bquote(bold("Cumulative"~CO[2]~"emissions since 2018"))) +
theme(
axis.text.x = element_text(angle = 45, size=12,  hjust=1),
axis.title.y = element_text(size=13),
axis.title.x = element_text(size=13),
axis.text.y = element_text(size=12),
strip.text.x = element_text(size=12, face="bold"),
strip.text.y = element_text(size=12, face="bold"),
legend.text= element_text(size=12),
legend.title=element_text(size=13,  face="bold"),
plot.title=element_text(size=16, hjust=0.5, face="bold"),
plot.subtitle=element_text(size=14,hjust=0.5),
panel.border = element_rect(colour = "black", size=1),
legend.key =  element_rect(fill = 'white', size = 0.5),
strip.background = element_rect(colour="white", fill="#FFFFFF")
)
print(CEMISanim)
CumEMIS[Variable %in% c("Industry") & Region %in% c("EU28")]
CEMISanim=ggplot()+
geom_bar(data=CumEMIS[Variable %in% c("Industry") & Region %in% c("EU28")], aes(x=Scenario, y=CEMIS/1000), fill='grey80', stat="identity", position="stack", colour="black")+
geom_bar(data=CumEMIS[Variable %in% c("Biomass|Industry") & Region %in% c("EU28") ], aes(x=Scenario, y=-CEMIS/1000, fill=Variable), stat="identity", position="stack", colour="black")+
geom_bar(data=CumEMIS[Variable %in% c("Iron and Steel", "Chemicals and Petrochemicals", "Pulp and Paper", "Food Processing", " Cement") &  Region %in% c("EU28")], aes(x=Scenario, y=CEMIS/1000, fill=Variable), stat="identity", position="stack", colour="black")+
geom_hline(yintercept=0, linetype=1, size=1) +
xlab("Region") + ylab(bquote("Gt"~CO[2])) + ggtitle(bquote(bold("Cumulative"~CO[2]~"emissions since 2018"))) +
theme(
axis.text.x = element_text(angle = 45, size=12,  hjust=1),
axis.title.y = element_text(size=13),
axis.title.x = element_text(size=13),
axis.text.y = element_text(size=12),
strip.text.x = element_text(size=12, face="bold"),
strip.text.y = element_text(size=12, face="bold"),
legend.text= element_text(size=12),
legend.title=element_text(size=13,  face="bold"),
plot.title=element_text(size=16, hjust=0.5, face="bold"),
plot.subtitle=element_text(size=14,hjust=0.5),
panel.border = element_rect(colour = "black", size=1),
legend.key =  element_rect(fill = 'white', size = 0.5),
strip.background = element_rect(colour="white", fill="#FFFFFF")
)
print(CEMISanim)
CEMISanim=ggplot()+
geom_bar(data=CumEMIS[Variable %in% c("Industry") & Region %in% c("EU28")], aes(x=Scenario, y=CEMIS/1000), fill='grey80', stat="identity", position="stack", colour="black")+
theme(
axis.text.x = element_text(angle = 45, size=12,  hjust=1),
axis.title.y = element_text(size=13),
axis.title.x = element_text(size=13),
axis.text.y = element_text(size=12),
strip.text.x = element_text(size=12, face="bold"),
strip.text.y = element_text(size=12, face="bold"),
legend.text= element_text(size=12),
legend.title=element_text(size=13,  face="bold"),
plot.title=element_text(size=16, hjust=0.5, face="bold"),
plot.subtitle=element_text(size=14,hjust=0.5),
panel.border = element_rect(colour = "black", size=1),
legend.key =  element_rect(fill = 'white', size = 0.5),
strip.background = element_rect(colour="white", fill="#FFFFFF")
)
print(CEMISanim)
head(CumEMIS[Variable %in% c("Industry") & Region %in% c("EU28")])
################################################################################################
################################################################################################
# Clear memory
rm(list=ls()) # clear memory
# Working directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
## Required packages
### If not yet availabe, use install.packages("")
# Soc Media API readers
library(rtweet)
# plotting and pipes!
library(ggplot2)
library(pathwork)
################################################################################################
################################################################################################
# Clear memory
rm(list=ls()) # clear memory
# Working directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
## Required packages
### If not yet availabe, use install.packages("")
# Soc Media API readers
library(rtweet)
# plotting and pipes!
library(ggplot2)
library(patchwork)
devtools::install_github("thomasp85/patchwork"))
install.packages("devtools")
library(devtools)
devtools::install_github("thomasp85/patchwork"))
devtools::install_github("thomasp85/patchwork")
################################################################################################
################################################################################################
# Clear memory
rm(list=ls()) # clear memory
# Working directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
## Required packages
### If not yet availabe, use install.packages("")
# Soc Media API readers
library(rtweet)
# plotting and pipes!
library(ggplot2)
library(patchwork)
devtools::install_github("thomasp85/patchwork")
library(patchwork)
devtools::install_github("thomasp85/patchwork"))
install.packages("colorspace")
devtools::install_github("thomasp85/patchwork")
devtools::install_github("thomasp85/patchwork")
devtools::install_github("thomasp85/patchwork")
devtools::install_github("thomasp85/patchwork")
# Clear memory
rm(list=ls()) # clear memory
# Clear memory
rm(list=ls()) # clear memory
# Working directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
## Required packages
### If not yet availabe, use install.packages("")
# Soc Media API readers
library(rtweet)
# plotting and pipes!
library(ggplot2)
library(patchwork)
library(dplyr)
library(tidyr)
library(data.table)
library(paletteer)
library(ggrepel)
library(igraph)
library(ggraph)
# text mining library
library(tidytext)
library(tm)
# coupled words analysis
library(widyr)
theme_set(
theme_bw()
)
########################################################################################
## API set-up
########################################################################################
token <- create_token(
app = "RtweetStudies",
consumer_key = "XsUTxqZNWovUgkNsFctSasLb7",
consumer_secret = "XKg0X52FKVEPMBh4lvMIJZaD0qVuj56vaaPLhsWsJ03xLiZnpD",
access_token = '3092191180-6hcwjXBiyE7SVoHmCUVHOrr5kdi0pgYxIKq0YM6',
access_secret = 'N6Fk8IZFyE0F4RTWRFoIjFieMNDUS8M162imYoYipgS50')
########################################################################################
## Your analysis input
########################################################################################
Date <-Sys.Date()
TopicSearch <- c("PBL", "Leefomgeving", "Planbureau", "Planbureau voor de Leefomgeving", "Plan Bureau")
GreenTweet <- c("Energieakkoord", " Energierekening", " Voorspellingen", " Ramingen")
stop_words_nl=tibble(word=stopwords("dutch"))
########################################################################################
##########################################################################
### Pull recent tweets (7 days)
##########################################################################
Pull_tweets  <- lapply(TopicSearch, function(i) {
Tweets <- search_tweets(q = i,
n = 5000)
Tweets$Keyword <- i
Tweets = data.table(Tweets)
})
Pull_tweets_list <- rbindlist(Pull_tweets)
# Open old saved list
# Pull_tweets_list =read.csv("Pull_tweets_list_2019-02-21.csv", sep=",")
Pull_tweets_list =Pull_tweets_list %>%
filter(!screen_name=="PBL_DEE")
## Save to csv
save_as_csv(Pull_tweets_list, paste("Pull_tweets_list_PBL_Twitterstorm", Date, ".csv", sep=""), prepend_ids = TRUE, na = "",
fileEncoding = "UTF-8")
######### Network analysis
NETWORK = Pull_tweets_list %>%
# find paired words
group_by(Keyword) %>%
select(Keyword, text, followers_count) %>%
unnest_tokens(paired_words, text, token="ngrams", n=2) %>%
#count
count(paired_words, sort=TRUE) %>%
# split
separate(paired_words, c("word1", "word2"), sep = " ") %>%
filter(!word1 %in% c(stop_words_nl$word, "https", "t.co")) %>%
filter(!word2 %in% c(stop_words_nl$word, "https", "t.co"))
# new count: dont know why you would do this???
#count(word1, word2, sort = TRUE)
# plot
PLOT = NETWORK %>%
group_by(Keyword) %>%
filter(n >= 60) %>%
#fct_explicit_na( na_level = "NA") %>%
graph_from_data_frame() %>%
ggraph(layout = "fr") +
geom_edge_link(aes(edge_alpha = n, edge_width = n), colour="lightblue") +
geom_node_point(colour="blue", size = 3) +
geom_node_text(aes(label = name), vjust = 1.8, size = 3) +
labs(title = "Word Network",
subtitle = "Text mining twitter data ",
x = "", y = "", caption = "\nSource: Data collected from Twitter's REST API via rtweet") +
theme_bw() +
ggsave(paste("Word_Network_tweets_PBL_", Date,".png", sep=""), width = 13, height = 10, units = c("in"), dpi=300)
##########################################################################
### Show timeline
##########################################################################
## plot time series (if ggplot2 is installed)
TIMELINE = Pull_tweets_list  %>%
#Filter
group_by(Keyword) %>%
filter(is_retweet==F ) %>%
#Plot
ts_plot(size=1) +
theme_bw()+
theme(text = element_text(size=15),
strip.text.x = element_text(size=13, face="bold"),
strip.background = element_rect(colour="white", fill="#FFFFFF"),
panel.border = element_rect(colour = "black", size=2),
legend.title = element_text(face="bold"),
legend.text = element_text(size=16))+
labs(
title = "Number of tweets per keyword",
subtitle = "Tweets collected, parsed, and plotted using `rtweet`") +
scale_color_paletteer_d(jcolors, rainbow) +
ggsave(paste("Timeline_tweets_PBL_Twitterstorm", Date,".png", sep=""), width = 15, height = 8, units = c("in"))
##########################################################################
######### Analyse words in last 7 days
##########################################################################
COUNTALL = Pull_tweets_list  %>%
# Filter out
group_by(Keyword) %>%
mutate(text=as.character(text)) %>%
unnest_tokens(word, text) %>%
count(word, sort = TRUE) %>%
# Clean up text
anti_join(stop_words) %>%
anti_join(stop_words_nl, by=c("word")) %>%
filter(!word %in% c("t.co", "report", "https", tolower(TopicSearch))) %>%
top_n(10) %>%
## reordering
group_by(word) %>%
mutate(word_sum=sum(n)) %>%
ungroup()%>%
mutate(word = reorder(word, word_sum)) %>%
ggplot(aes(x = word, y = n)) +
geom_col(aes( fill=Keyword), colour="black") +
theme_bw() +
scale_color_paletteer_d(jcolors, rainbow) +
#facet_wrap(~Keyword, scales = "free") +
xlab(NULL) +
#scale_y_log10()+
coord_flip() +
scale_fill_paletteer_d(quickpalette, dreaming) +
guides(fill=guide_legend("Keyword")) +
theme(text = element_text(size=15),
strip.text.x = element_text(size=12, face="bold"),
strip.background = element_rect(colour="white", fill="#FFFFFF"),
panel.border = element_rect(colour = "black", size=2),
legend.title = element_text(face="bold"),
legend.text = element_text(size=16))+
labs(y = "Number of times used",
x = "Unique words",
title = paste("Count of unique words in tweets [", Date, " snapshot]", sep=""))  +
ggsave(paste("Tweet_people__PBL_Twitterstorm",Date,".png", sep=""), width = 15, height = 8, units = c("in"))
##########################################################################
#### Accounts tweeting on business associations' green tweets:
##########################################################################
COUNTGREEN = Pull_tweets_list  %>%
#filter(grepl(paste(GreenTweet, collapse="|"), text)) %>%
group_by(Keyword) %>%
count(screen_name) %>%
top_n(10) %>%
ungroup() %>%
# reordering
group_by(screen_name) %>%
mutate(screen_name_sum=sum(n)) %>%
ungroup()%>%
mutate(screen_name = reorder(screen_name, screen_name_sum)) %>%
#Filter more
filter(!n <= 1) %>%
#plotting
ggplot(aes(x = screen_name, y = n)) +
geom_col(aes( fill=Keyword), colour="black") +
theme_bw() +
scale_color_paletteer_d(jcolors, rainbow) +
#facet_wrap(~Keyword, scales = "free") +
xlab(NULL) +
#scale_y_log10()+
coord_flip() +
scale_fill_paletteer_d(quickpalette, dreaming) +
guides(fill=guide_legend("Keyword")) +
theme(text = element_text(size=15),
strip.text.x = element_text(size=12, face="bold"),
strip.background = element_rect(colour="white", fill="#FFFFFF"),
panel.border = element_rect(colour = "black", size=2),
legend.title = element_text(face="bold"),
legend.text = element_text(size=16))+
labs(y = "Number of times used",
x = "Unique words",
title = paste("Count of Tweets per Tweeting person", Date, sep=""),
subtitle=paste( "[", Date, " snapshot]", sep=""))  +
ggsave(paste("Tweet_top_tweeters_PBL_",Date,".png", sep=""), width = 13, height = 8, units = c("in"))
# Compile overview plot (using patvhwork devtools::install_github("thomasp85/patchwork"))
OVERVIEW = TIMELINE + COUNTALL +  plot_layout(ncol =1, heights = c(1, 2))
print(OVERVIEW)
dev.off()
ggsave(paste("OVERVIEW_PBL_Twitterstorm" ,Date,".png", sep=""), width=11, height=11, unit="in")
NETWORK %>%
group_by(Keyword) %>%
filter(n >= 60) %>%
#fct_explicit_na( na_level = "NA") %>%
graph_from_data_frame() %>%
ggraph(layout = "fr") +
geom_edge_link(aes(edge_alpha = n, edge_width = n), colour="lightblue") +
geom_node_point(colour="blue", size = 3) +
geom_node_text(aes(label = name), vjust = 1.8, size = 3) +
labs(title = "Word Network",
subtitle = "Text mining twitter data ",
x = "", y = "", caption = "\nSource: Data collected from Twitter's REST API via rtweet") +
theme_bw()
######### Network analysis
NETWORK_TML = Pluck_tweets_list %>%
mutate(Year=as.numeric(substr(created_at, 1,4))) %>%
# find paired words
group_by(Keyword) %>%
select(Keyword, plain, followers_count, Year) %>%
unnest_tokens(paired_words, plain, token="ngrams", n=2) %>%
#count
count(paired_words, sort=TRUE) %>%
# split
separate(paired_words, c("word1", "word2"), sep = " ") %>%
filter(!word1 %in% c(stop_words$word, stop_words_nl$word, stop_words_du$word,"https", "t.co")) %>%
filter(!word2 %in% c(stop_words$word, "https", "t.co"))
# new count: dont know why you would do this???
#count(word1, word2, sort = TRUE)
# plot
NETWORKPLOT2 = NETWORK_TML %>%
group_by(Keyword) %>%
filter(n >= 10) %>%
graph_from_data_frame() %>%
ggraph(layout = "fr") +
geom_edge_link(aes(edge_alpha = n, edge_width = n), colour="lightblue") +
geom_node_point(colour="blue", size = 3) +
geom_node_text(aes(label = name), vjust = 1.8, size = 3) +
labs(title = "Word Network of Timeline Tweets",
subtitle = "Text mining twitter data ",
x = "", y = "", caption = "\nSource: Data collected from Twitter's REST API via rtweet") +
theme_bw() +
ggsave(paste("Word_Network_Timeline_tweets_Industry_", Date,".png", sep=""), width = 10, height = 7, units = c("in"), dpi=300)
print(NETWORKPLOT2)
################################
### PLUCKING TIMELINES
## Pull Twitter timelines
Pluck_tweets  <- lapply(TopicSearch, function(i) {
List <- get_timeline(i, n = 2000, parse=T)
List$Keyword <- i
List = data.table(List)
})
Pluck_tweets_list <- do_call_rbind(Pluck_tweets)
Pluck_tweets_list$plain <- plain_tweets(Pluck_tweets_list$text)
## Save to csv
save_as_csv(Pluck_tweets_list, paste("Pluck_tweets_list_Timeline_Industry_", Date, " .csv", sep=""), prepend_ids = TRUE, na = "",
fileEncoding = "UTF-8")
################################
######### Network analysis
NETWORK_TML = Pluck_tweets_list %>%
mutate(Year=as.numeric(substr(created_at, 1,4))) %>%
# find paired words
group_by(Keyword) %>%
select(Keyword, plain, followers_count, Year) %>%
unnest_tokens(paired_words, plain, token="ngrams", n=2) %>%
#count
count(paired_words, sort=TRUE) %>%
# split
separate(paired_words, c("word1", "word2"), sep = " ") %>%
filter(!word1 %in% c(stop_words$word, stop_words_nl$word, stop_words_du$word,"https", "t.co")) %>%
filter(!word2 %in% c(stop_words$word, "https", "t.co"))
# new count: dont know why you would do this???
#count(word1, word2, sort = TRUE)
# plot
NETWORKPLOT2 = NETWORK_TML %>%
group_by(Keyword) %>%
filter(n >= 10) %>%
graph_from_data_frame() %>%
ggraph(layout = "fr") +
geom_edge_link(aes(edge_alpha = n, edge_width = n), colour="lightblue") +
geom_node_point(colour="blue", size = 3) +
geom_node_text(aes(label = name), vjust = 1.8, size = 3) +
labs(title = "Word Network of Timeline Tweets",
subtitle = "Text mining twitter data ",
x = "", y = "", caption = "\nSource: Data collected from Twitter's REST API via rtweet") +
theme_bw() +
ggsave(paste("Word_Network_Timeline_tweets_Industry_", Date,".png", sep=""), width = 10, height = 7, units = c("in"), dpi=300)
print(NETWORKPLOT2)
print(NETWORKPLOT2)
dev.off()
ggsave(paste("NETWORKPLOT2_PBL_Twitterstorm" ,Date,".png", sep=""), width=11, height=11, unit="in")
print(NETWORKPLOT2)
install.packages("beepr")
library(beepr)
beep(sound=3)
beep(sound="3")
beep(3)
library("gifski", lib.loc="/data/sluisveldvm/R/x86_64-redhat-linux-gnu-library/3.5")
